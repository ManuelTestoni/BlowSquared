# Generated by Django 5.2.3 on 2025-07-02 08:17

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('prodotti', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Negozio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text="Nome del punto vendita (es: 'BlowSquared Centro', 'BlowSquared Nord')", max_length=100)),
                ('codice_negozio', models.CharField(help_text="Codice identificativo univoco del negozio (es: 'BS001', 'BS002')", max_length=10, unique=True)),
                ('indirizzo', models.CharField(help_text='Via e numero civico', max_length=200)),
                ('cap', models.CharField(help_text='Codice di Avviamento Postale', max_length=10)),
                ('citta', models.CharField(help_text='Città del negozio', max_length=100)),
                ('provincia', models.CharField(help_text="Sigla della provincia (es: 'MO', 'BO', 'RE')", max_length=2)),
                ('regione', models.CharField(help_text='Regione di appartenenza', max_length=50)),
                ('nazione', models.CharField(default='Italia', help_text='Nazione del negozio', max_length=50)),
                ('latitudine', models.DecimalField(decimal_places=7, help_text='Coordinate GPS - Latitudine (es: 44.6471700)', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('-90')), django.core.validators.MaxValueValidator(Decimal('90'))])),
                ('longitudine', models.DecimalField(decimal_places=7, help_text='Coordinate GPS - Longitudine (es: 10.9251400)', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('-180')), django.core.validators.MaxValueValidator(Decimal('180'))])),
                ('telefono', models.CharField(blank=True, help_text='Numero di telefono del negozio', max_length=20, null=True)),
                ('email', models.EmailField(blank=True, help_text='Email del punto vendita', max_length=254, null=True)),
                ('orari_apertura', models.JSONField(blank=True, default=dict, help_text='Orari di apertura per ogni giorno della settimana')),
                ('superficie_mq', models.PositiveIntegerField(blank=True, help_text='Superficie del negozio in metri quadrati', null=True)),
                ('numero_casse', models.PositiveIntegerField(default=1, help_text='Numero di casse disponibili')),
                ('parcheggio_disponibile', models.BooleanField(default=True, help_text='Indica se il negozio ha parcheggio')),
                ('posti_parcheggio', models.PositiveIntegerField(blank=True, help_text='Numero di posti parcheggio disponibili', null=True)),
                ('servizio_farmacia', models.BooleanField(default=False, help_text='Presenza di servizio farmacia')),
                ('servizio_panetteria', models.BooleanField(default=False, help_text='Presenza di panetteria interna')),
                ('servizio_macelleria', models.BooleanField(default=False, help_text='Presenza di banco macelleria')),
                ('servizio_pescheria', models.BooleanField(default=False, help_text='Presenza di banco pescheria')),
                ('servizio_consegna_domicilio', models.BooleanField(default=True, help_text='Disponibilità servizio consegna a domicilio')),
                ('ritiro_click_collect', models.BooleanField(default=True, help_text='Disponibilità ritiro ordini online (Click & Collect)')),
                ('direttore', models.CharField(blank=True, help_text='Nome del direttore del punto vendita', max_length=100, null=True)),
                ('data_apertura', models.DateField(help_text='Data di apertura del negozio')),
                ('attivo', models.BooleanField(default=True, help_text='Indica se il negozio è attualmente operativo')),
                ('data_creazione', models.DateTimeField(auto_now_add=True)),
                ('data_modifica', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Negozio',
                'verbose_name_plural': 'Negozi',
                'ordering': ['nome', 'citta'],
            },
        ),
        migrations.CreateModel(
            name='DisponibilitaProdotto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantita_disponibile', models.PositiveIntegerField(default=0, help_text='Quantità attualmente disponibile nel negozio')),
                ('quantita_minima', models.PositiveIntegerField(default=5, help_text='Quantità minima sotto la quale riordinare')),
                ('quantita_massima', models.PositiveIntegerField(blank=True, help_text='Quantità massima che il negozio può contenere', null=True)),
                ('settore', models.CharField(blank=True, help_text="Settore del negozio (es: 'Fresco', 'Secco', 'Surgelati')", max_length=50, null=True)),
                ('corridoio', models.CharField(blank=True, help_text='Numero corridoio o zona specifica', max_length=20, null=True)),
                ('scaffale', models.CharField(blank=True, help_text='Identificativo scaffale', max_length=20, null=True)),
                ('prezzo_locale', models.DecimalField(blank=True, decimal_places=2, help_text='Prezzo specifico per questo negozio (se diverso dal prezzo base)', max_digits=8, null=True)),
                ('in_promozione_locale', models.BooleanField(default=False, help_text='Indica se il prodotto è in promozione in questo specifico negozio')),
                ('sconto_locale', models.DecimalField(decimal_places=2, default=0, help_text='Sconto percentuale specifico del negozio', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0')), django.core.validators.MaxValueValidator(Decimal('100'))])),
                ('ultimo_rifornimento', models.DateTimeField(blank=True, help_text="Data dell'ultimo rifornimento", null=True)),
                ('prossimo_rifornimento', models.DateTimeField(blank=True, help_text='Data del prossimo rifornimento previsto', null=True)),
                ('vendite_giornaliere_media', models.DecimalField(decimal_places=2, default=0, help_text='Media vendite giornaliere per questo prodotto nel negozio', max_digits=8)),
                ('data_creazione', models.DateTimeField(auto_now_add=True)),
                ('data_modifica', models.DateTimeField(auto_now=True)),
                ('prodotto', models.ForeignKey(help_text='Prodotto di riferimento', on_delete=django.db.models.deletion.CASCADE, related_name='disponibilita_negozi', to='prodotti.prodotto')),
                ('negozio', models.ForeignKey(help_text='Negozio di riferimento', on_delete=django.db.models.deletion.CASCADE, related_name='disponibilita_prodotti', to='negozi.negozio')),
            ],
            options={
                'verbose_name': 'Disponibilità Prodotto',
                'verbose_name_plural': 'Disponibilità Prodotti',
                'ordering': ['negozio__nome', 'prodotto__nome'],
                'unique_together': {('negozio', 'prodotto')},
            },
        ),
    ]
